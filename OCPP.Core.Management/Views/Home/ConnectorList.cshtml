@using Microsoft.AspNetCore.Mvc.Localization
@model ConnectorStatusViewModel
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = @Localizer["Title"];
}
<br />

@if (Model != null)
{
    <table id="dtConnectorStatus" class="table table-striped table-bordered table-sm table-hover" cellspacing="0" width="100%">
        <thead class="thead-dark">
            <tr>
                <th scope="col">@Localizer["ChargePointId"]</th>
                <th scope="col">@Localizer["ConnectorId"]</th>
                <th scope="col">@Localizer["ConnectorName"]</th>
                <th scope="col">@Localizer["LastStatus"]</th>
                <th scope="col">@Localizer["LastStatusTime"]</th>
                <th scope="col">@Localizer["LastMeter"]</th>
                <th scope="col">@Localizer["LastMeterTime"]</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.ConnectorStatuses != null)
            {
                foreach (ConnectorStatus cs in Model.ConnectorStatuses)
                {
                    <tr class="table-row" data-href='@Url.Action("Connector", Constants.HomeController, new { id = cs.ChargePointId, connectorId = cs.ConnectorId.ToString() })'>
                        <td>@cs.ChargePointId</td>
                        <td>@cs.ConnectorId</td>
                        <td>@cs.ConnectorName</td>
                        <td>@((!string.IsNullOrEmpty(cs.LastStatus)) ? cs.LastStatus : "-")</td>
                        <td>@((cs.LastStatusTime.HasValue) ? string.Format("{0:G}", cs.LastStatusTime.Value.ToLocalTime()) : "-")</td>
                        <td>@((cs.LastMeter.HasValue) ? string.Format("{0:0.0##}", cs.LastMeter.Value) : "-" )</td>
                        <td>@((cs.LastMeterTime.HasValue) ? string.Format("{0:G}", cs.LastMeterTime.Value.ToLocalTime()): "-")</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
